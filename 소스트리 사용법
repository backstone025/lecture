sorecetree

* 파일이나 폴더 자동으로 무시하는 방법:
1) .gitignore 란 파일 만들기(메모지) ---- 주의! 확장자는 지울것(예: .txt .cpp)
2) .gitignore 안에 무시할 파일 이름 적기 -> 스테이지에 올라와 있지 않음을 알 수 있다.
+ ~.txt ~1.txt 처럼 이름뒤에 숫자 붙여도 무시하는 것으로 처리됨.
+ 무시할 것이 폴더일 때 \를 붙인다.

* 커밋 자세히 보기
- (커밋) 해시: 커밋이 가진 고유의 ID(학번과 비슷)
- 상위: 어떤 커밋에서 나왔는지 알려줌

* 태그 붙여 릴리스 하기
- 릴리스(release): 개발한 소프트웨어를 사용자에게 선보이는 것
문제: 커밋이 많아 무엇이 릴리스 버전인지 알 수 없다.(의미있는 것을 찾기 어렵다.)
태그 방법: 태그 눌러 작성한다. 
+ 태그는 v.(X).(Y).(Z)식으로 작성, X: 주 버전 = 기존에 내놓은 버전과 호환 안될 때  
			   Y: 부 버전 = 기존버전과 호환, but 새로운 기능 추가
			   Z: 수 버전 = 버그 등 작은 변화 있을 때

* 커밋 되돌리기 (뒤로가기랑 비슷?)
1) revert : 버전을 되돌리되, 새로운 버전(커밋)을 만드는 것 (이전 버전을 복사)
- 방법: 커밋 되돌리기 항목 클릭

2) reset : 버전을 되돌리되, 그 시점에서 시작하는 것
reset의 종류:
- soft reset
	커밋한 사실만 되돌리는 것
- mixed reset
	커밋 + 스테이지까지 되돌리기
- hard reset
	커밋 + 스테이지 + 작업 디렉터리까지 되돌리기

방법: "이 커밋까지 현재 브랜츠를 초기화"클릭 -> soft? or mixed? or hard?

* 스태시(stash)
용도: 만들긴 만들었는데, 당장은 필요 없지만 버리긴 아까운 것을 임시 저장할 때
특징:
	- 작업 디렉터리에서 생성한 모든 변경 사항이 임시저장됨.
	- 여러 개 저장 가능
주의!	스태치 사용할 수 있는 파일:
		추적가능한 파일 (커밋한 적이 있는 파일)
방법: 위쪽 창 스태시 클릭 -> !스테이지에 있는 변경사항 유지 체크 x! -> 
	왼쪽 창 스태시 클릭 -> 스태시 적용 -> 임시저장한게 작업 디렉토리에 적용

* 브랜치(branch)
- 브랜치 나누기
	HEAD : 현재 작업 중인 브랜치의 최신 커밋
	체크아웃: 특정 브랜치에 작업할 수 있게 작업환경 바꾸는 것(작업 디렉터리 지정한 커밋으로 바뀌는 것)
		체크아웃 하는 법: history -> 브래프 목록 중 원하는 브랜치 선택 후 두번 클릭!
	방법:
	       상단 "브랜치"클릭 / 브랜치 이름 입력, '새 브랜치 체크아웃'에 체크 / 왼쪽 목록중 커밋할 브렌치 이름 확인 /
	       (만일 없으면 master 오른쪽 이름 두번 클릭 = 체크아웃) / 커밋한다.  => 나누기 성공!
- 브랜치 병합 
	방법:
	       1. master 브랜치로 체크아웃 -> 상단 병합 클릭 -> 병합할 브랜치 클릭 ->왼쪽 창 병합된 브랜치 오른쪽 클릭으로 제거
	       2.       ''   -> 왼쪽 창 병합할 브랜치 오른쪽 클릭 -> '현재 브랜치로 ~을 병합' 클릭 ->       ''

* 충돌 해결하기
충돌하는 경우: 병합하려는 두 브랜치가 서로 같은 내용을 다르게 수정한 상황 (master 가만 두면 충돌 안생김)
충동해결: 같은 내용을 다르게 수정한 두 브랜치 중 하나를 선택하는 것
충돌한 발생한 파일
<<<<<<< HEAD
(현재 브랜치(master) 내용)
=======
(병합하고자 하는 브랜치 내용)
>>>>>>>
방법: '스테이지에 올라가지 않은 파일'마우스 오른쪽 클릭 -> 충동해결 -> '내것'을 이용해 해결
이후 병합: 파일상태 -> 커밋(+ 수정할 내용 확인)

* 브랜치 재배치하기(rebase)
뜻: 브랜치가 뻗어나온 기준점을 변경하는 것(master의 현재 상황으로)
방법: master로 체크아웃 -> 마우스 오른쪽 -> 재배치(재배치 중에도 충돌할 수 있음)
